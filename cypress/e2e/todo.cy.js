/// <reference types="cypress" />

// Bienvenue dans Cypress !
//
// Ce fichier de test contient une variÃ©tÃ© dâ€™exemples
// pour une application de gestion de tÃ¢ches (todo app).
// Ces tests montrent la puissance de Cypress pour Ã©crire des tests.
//
// Pour en savoir plus sur le fonctionnement de Cypress
// et pourquoi câ€™est un outil de test formidable,
// consultez le guide de dÃ©marrage :
// https://on.cypress.io/introduction-to-cypress

// Fonctions mathÃ©matiques simples pour illustrer les hooks
function add(a, b) {
  return a + b;
}
function subtract(a, b) {
  return a - b;
}
function divide(a, b) {
  return a / b;
}
function multiply(a, b) {
  return a * b;
}

describe("exemple dâ€™application todo", () => {
  // Un hook est une fonction spÃ©ciale qui sâ€™exÃ©cute avant ou aprÃ¨s les tests.
  // Câ€™est utile pour prÃ©parer ou nettoyer lâ€™environnement de test.
  // Les hooks principaux sont :
  // before() â†’ sâ€™exÃ©cute une seule fois avant tous les tests du bloc.
  // after() â†’ sâ€™exÃ©cute une seule fois aprÃ¨s tous les tests du bloc.
  // beforeEach() â†’ sâ€™exÃ©cute avant chaque test.
  // afterEach() â†’ sâ€™exÃ©cute aprÃ¨s chaque test.

  beforeEach(() => {
    // Cypress dÃ©marre chaque test avec un Ã©tat vierge.
    // On doit donc indiquer Ã  Cypress de visiter notre site avec la commande `cy.visit()`.
    // Comme on veut visiter la mÃªme URL au dÃ©but de chaque test,
    // on met ce `cy.visit()` dans un beforeEach : ainsi il sâ€™exÃ©cute avant chaque test.
    cy.visit("https://example.cypress.io/todo");
  });

  afterEach(() => {
    // Capture automatique dâ€™un screenshot aprÃ¨s CHAQUE test
    cy.screenshot();
  });

  context("Tests sur les fonctions mathÃ©matiques", () => {
    let a, b;

    before(() => {
      // PrÃ©parer des variables une seule fois
      cy.log("DÃ©marrage des tests de math");
    });

    beforeEach(() => {
      // Avant chaque test, je rÃ©initialise mes nombres
      a = 10;
      b = 5;
    });

    it("additionne correctement", () => {
      expect(add(a, b)).to.eq(15);
    });

    it("soustrait correctement", () => {
      expect(subtract(a, b)).to.eq(5);
    });

    afterEach(() => {
      cy.log("Test terminÃ© âœ…");
    });

    after(() => {
      cy.log("Tous les tests sont finis ğŸš€");
    });
  });

  it("affiche deux tÃ¢ches par dÃ©faut", () => {
    // On utilise `cy.get()` pour rÃ©cupÃ©rer tous les Ã©lÃ©ments qui correspondent au sÃ©lecteur.
    // Puis, avec `should`, on vÃ©rifie quâ€™il y a bien deux Ã©lÃ©ments correspondants,
    // ce qui correspond aux deux tÃ¢ches prÃ©sentes par dÃ©faut.
    cy.get(".todo-list li").should("have.length", 2);

    // On peut aller plus loin et vÃ©rifier que les tÃ¢ches par dÃ©faut
    // contiennent bien le texte attendu. On utilise `first` et `last`
    // pour cibler uniquement le premier et le dernier Ã©lÃ©ment,
    // puis on vÃ©rifie avec `should` que leur texte est correct.
    cy.get(".todo-list li").first().should("have.text", "Pay electric bill");
    cy.get(".todo-list li").last().should("have.text", "Walk the dog");
  });

  it("peut ajouter une nouvelle tÃ¢che", () => {
    // On stocke le texte de la nouvelle tÃ¢che dans une variable
    // afin de pouvoir le rÃ©utiliser facilement.
    const newItem = "Feed the cat";

    // On sÃ©lectionne lâ€™Ã©lÃ©ment input grÃ¢ce Ã  son attribut `data-test`
    // et on utilise la commande `type` pour taper le texte de la tÃ¢che.
    // AprÃ¨s avoir tapÃ© le texte, on simule aussi la touche "EntrÃ©e" pour soumettre.
    cy.get("[data-test=new-todo]").type(`${newItem}{enter}`);

    // On vÃ©rifie ensuite que la tÃ¢che a bien Ã©tÃ© ajoutÃ©e Ã  la liste.
    // Comme câ€™est la plus rÃ©cente, elle doit apparaÃ®tre en dernier.
    // Avec les deux tÃ¢ches par dÃ©faut, il doit donc y avoir 3 Ã©lÃ©ments au total.
    // Comme les assertions renvoient lâ€™Ã©lÃ©ment testÃ©,
    // on peut enchaÃ®ner plusieurs vÃ©rifications dans une seule instruction.
    cy.get(".todo-list li")
      .should("have.length", 3)
      .last()
      .should("have.text", newItem);
  });

  it("peut cocher une tÃ¢che comme terminÃ©e", () => {
    // En plus de `get`, on peut utiliser `contains` pour rÃ©cupÃ©rer un Ã©lÃ©ment par son texte.
    // Cela renvoie ici le <label> qui contient le texte.
    // Pour cocher la case correspondante, on remonte au parent (<li>)
    // puis on cherche lâ€™Ã©lÃ©ment enfant <input type=checkbox> et on le coche avec `check()`.
    cy.contains("Pay electric bill")
      .parent()
      .find("input[type=checkbox]")
      .check();

    // Une fois la case cochÃ©e, on vÃ©rifie que lâ€™Ã©lÃ©ment <li> correspondant
    // possÃ¨de bien la classe CSS `completed`.
    // On repart du texte avec `contains`, on remonte avec `parents('li')`
    // et on fait lâ€™assertion sur la classe.
    cy.contains("Pay electric bill")
      .parents("li")
      .should("have.class", "completed");
  });

  context("avec une tÃ¢che dÃ©jÃ  cochÃ©e", () => {
    beforeEach(() => {
      // On reprend la commande utilisÃ©e ci-dessus pour cocher une tÃ¢che.
      // Comme plusieurs tests de ce bloc commencent par cet Ã©tat,
      // on met cette action dans un `beforeEach`.
      // Ainsi, elle est exÃ©cutÃ©e avant chaque test de ce `context`.
      cy.contains("Pay electric bill")
        .parent()
        .find("input[type=checkbox]")
        .check();
    });

    it("peut filtrer les tÃ¢ches non terminÃ©es", () => {
      // On clique sur le bouton "Active"
      // pour nâ€™afficher que les tÃ¢ches non terminÃ©es.
      cy.contains("Active").click();

      // AprÃ¨s le filtrage, il ne doit rester quâ€™une seule tÃ¢che : "Walk the dog".
      cy.get(".todo-list li")
        .should("have.length", 1)
        .first()
        .should("have.text", "Walk the dog");

      // Et on sâ€™assure aussi que la tÃ¢che cochÃ©e ("Pay electric bill")
      // nâ€™apparaÃ®t plus dans la liste.
      cy.contains("Pay electric bill").should("not.exist");
    });

    it("peut filtrer les tÃ¢ches terminÃ©es", () => {
      // MÃªme principe, mais avec le filtre "Completed"
      // pour nâ€™afficher que les tÃ¢ches terminÃ©es.
      cy.contains("Completed").click();

      cy.get(".todo-list li")
        .should("have.length", 1)
        .first()
        .should("have.text", "Pay electric bill");

      // VÃ©rification inverse : "Walk the dog" ne doit pas apparaÃ®tre.
      cy.contains("Walk the dog").should("not.exist");
    });

    it("peut supprimer toutes les tÃ¢ches terminÃ©es", () => {
      // On clique sur le bouton "Clear completed".
      // La commande `contains` sert Ã  deux choses ici :
      // - vÃ©rifier que le bouton existe (il nâ€™apparaÃ®t que si une tÃ¢che est cochÃ©e),
      // - sÃ©lectionner ce bouton pour pouvoir cliquer dessus.
      cy.contains("Clear completed").click();

      // On vÃ©rifie ensuite quâ€™il ne reste plus quâ€™une tÃ¢che dans la liste,
      // et que "Pay electric bill" a bien disparu.
      cy.get(".todo-list li")
        .should("have.length", 1)
        .should("not.have.text", "Pay electric bill");

      // Enfin, on vÃ©rifie que le bouton "Clear completed"
      // nâ€™existe plus dans la page.
      cy.contains("Clear completed").should("not.exist");
    });
  });

  it("rÃ©cupÃ¨re un champ, saisit une valeur et vÃ©rifie", () => {
    // On visite directement la page dâ€™accueil de lâ€™exemple Cypress.
    cy.visit("https://example.cypress.io");

    // On recherche dans la page un Ã©lÃ©ment contenant le texte "type"
    // et on clique dessus. Cela redirige vers une autre page de dÃ©monstration.
    cy.contains("type").click();

    // On vÃ©rifie que lâ€™URL actuelle contient bien "/commands/actions".
    // Cela prouve que le clic nous a bien redirigÃ© vers la bonne page.
    cy.url().should("include", "/commands/actions");

    // On rÃ©cupÃ¨re lâ€™input qui a la classe CSS ".action-email"
    // et on saisit lâ€™adresse email factice dans ce champ.
    cy.get(".action-email").type("fake@email.com");

    // Enfin, on vÃ©rifie que la valeur contenue dans lâ€™input
    // est bien exactement lâ€™email que lâ€™on vient de taper.
    cy.get(".action-email").should("have.value", "fake@email.com");
  });
});

// Un autre bloc `describe` pour illustrer quâ€™on peut avoir
// plusieurs groupes de tests dans un mÃªme fichier.
// Un fichier de test Cypress peut contenir autant de describe que tu veux.
// Chaque describe dÃ©finit une "suite de tests", donc tu peux regrouper tes tests par thÃ¨mes, modules ou fonctionnalitÃ©s.
describe("Fonctions mathÃ©matiques", () => {
  it("additionne correctement", () => {
    expect(add(2, 3)).to.eq(5);
  });
});

describe("Application Todo", () => {
  it("affiche deux tÃ¢ches par dÃ©faut", () => {
    cy.visit("https://example.cypress.io/todo");
    cy.get(".todo-list li").should("have.length", 2);
  });
});

// Un autre exemple avec des hooks pour prÃ©parer des variables
// context est identique Ã  describe, mais il sert souvent Ã  prÃ©ciser dans quel Ã©tat ou situation les tests sâ€™exÃ©cutent.
// Donc tu peux avoir plusieurs context imbriquÃ©s dans un mÃªme describe.
describe("Fonctions mathÃ©matiques", () => {
  context("Quand a=10 et b=5", () => {
    let a, b;
    beforeEach(() => {
      a = 10;
      b = 5;
    });

    it("additionne correctement", () => {
      expect(add(a, b)).to.eq(15);
    });

    it("soustrait correctement", () => {
      expect(subtract(a, b)).to.eq(5);
    });
  });

  context("Quand a=20 et b=4", () => {
    let a, b;
    beforeEach(() => {
      a = 20;
      b = 4;
    });

    it("divise correctement", () => {
      expect(divide(a, b)).to.eq(5);
    });

    it("multiplie correctement", () => {
      expect(multiply(a, b)).to.eq(80);
    });
  });
});

// Test vide pour illustrer quâ€™on peut dÃ©finir un test sans contenu
it("Bonjour", () => {});

// -------------------------
// Hooks au niveau global
// -------------------------
before(() => {
  // ğŸ”¹ S'exÃ©cute UNE SEULE FOIS avant TOUS les tests du fichier.
  // Exemple dâ€™usage : se connecter Ã  une base de donnÃ©es,
  // initialiser une configuration globale, prÃ©parer des donnÃ©es communes.
  // Exemple de fonctions utilisables :
  // visiter la page de login globale
  cy.visit("/login");
  // nettoyer les cookies
  cy.clearCookies();
  // nettoyer le localStorage
  cy.clearLocalStorage();
  // Les fixtures sont des fichiers JSON (ou CSV, etc.) qui contiennent tes jeux de donnÃ©es pour tests.
  // Un jeu de donnÃ©es est un ensemble de donnÃ©es utilisÃ©es pour tester votre application.
  // Ici on charge le fichier users.json et on crÃ©e des alias pour les utilisateurs.
  cy.fixture("users.json").then((users) => {
    cy.wrap(users.admin).as("adminUser");
    cy.wrap(users.guest).as("guestUser");
  });
});

beforeEach(() => {
  // ğŸ”¹ S'exÃ©cute AVANT CHAQUE test (it) du fichier.
  // Exemple dâ€™usage : visiter une page, rÃ©initialiser des variables,
  // se reconnecter Ã  lâ€™application pour partir dâ€™un Ã©tat propre.
  // Exemple de fonctions E2E :
  // repartir de la page d'accueil avant chaque test
  cy.visit("/");
  cy.get("@adminUser").then((user) => {
    // fonction custom Cypress pour login
    cy.login(user.username, user.password);
  });
});

afterEach(() => {
  // ğŸ”¹ S'exÃ©cute APRÃˆS CHAQUE test du fichier.
  // Exemple dâ€™usage : nettoyer les donnÃ©es de test,
  // prendre un screenshot, rÃ©initialiser lâ€™environnement.
  // Fonctions E2E utiles :
  // capture dâ€™Ã©cran pour reporting
  cy.screenshot();
});

after(() => {
  // ğŸ”¹ S'exÃ©cute UNE SEULE FOIS aprÃ¨s TOUS les tests du fichier.
  // Exemple dâ€™usage : fermer une connexion Ã  la base,
  // supprimer les donnÃ©es crÃ©Ã©es, envoyer un rapport final.
  // Fonctions E2E utiles :
  // nettoyage final
  cy.clearCookies();
  cy.clearLocalStorage();
  cy.log("Tous les tests terminÃ©s âœ…");
});

// -------------------------
// Hooks Ã  l'intÃ©rieur dâ€™un bloc de tests (describe)
// -------------------------
describe("Hooks", () => {
  before(() => {
    // ğŸ”¹ S'exÃ©cute UNE SEULE FOIS avant TOUS les tests de CE BLOC "describe".
    // Exemple dâ€™usage : prÃ©parer un utilisateur spÃ©cifique,
    // lancer une configuration propre Ã  ce groupe de tests.
  });

  beforeEach(() => {
    // ğŸ”¹ S'exÃ©cute AVANT CHAQUE test de CE BLOC "describe".
    // Exemple dâ€™usage : visiter une page particuliÃ¨re,
    // rÃ©initialiser lâ€™Ã©tat de lâ€™appli avant chaque test de ce groupe.
  });

  afterEach(() => {
    // ğŸ”¹ S'exÃ©cute APRÃˆS CHAQUE test de CE BLOC "describe".
    // Exemple dâ€™usage : nettoyage, dÃ©connexion dâ€™un utilisateur,
    // ou log pour indiquer que le test est terminÃ©.
  });

  after(() => {
    // ğŸ”¹ S'exÃ©cute UNE SEULE FOIS aprÃ¨s TOUS les tests de CE BLOC "describe".
    // Exemple dâ€™usage : supprimer les donnÃ©es crÃ©Ã©es par ce groupe de tests,
    // fermer une connexion locale ou faire un rapport final.
  });
});

// -------------------------
// Hooks au niveau global
// -------------------------
before(() => {
  // ğŸ”¹ S'exÃ©cute UNE SEULE FOIS avant TOUS les tests du fichier.
  // 1. Nettoyage initial
  cy.clearCookies();
  cy.clearLocalStorage();

  // 2. Charger les fixtures (jeux de donnÃ©es)
  // users.json contient tous les profils : admin, guest, apiUser...
  cy.fixture("users.json").then((users) => {
    cy.wrap(users.admin).as("adminUser");
    cy.wrap(users.guest).as("guestUser");
    cy.wrap(users.apiUser).as("apiUser");
  });
});

beforeEach(() => {
  // ğŸ”¹ S'exÃ©cute AVANT CHAQUE test
  // Repartir d'un Ã©tat propre : page d'accueil ou login
  cy.visit("/");
});

afterEach(() => {
  // ğŸ”¹ S'exÃ©cute APRÃˆS CHAQUE test
  // Capturer une capture dâ€™Ã©cran pour reporting
  cy.screenshot();
});

after(() => {
  // ğŸ”¹ S'exÃ©cute UNE SEULE FOIS aprÃ¨s tous les tests
  // Nettoyage final
  cy.clearCookies();
  cy.clearLocalStorage();
  cy.log("Tous les tests terminÃ©s âœ…");
});

// -------------------------
// Tests ScÃ©narios Login
// -------------------------
describe("ScÃ©narios Login", () => {
  beforeEach(() => {
    // On inspecte la reguete de login
    cy.cy // Avant chaque test login, repartir de la page login
      .visit("/login");
  });

  it("Login avec admin valide", () => {
    cy.get("@adminUser").then((user) => {
      cy.login(user.username, user.password);
      cy.url().should("include", "/dashboard");
      cy.get(".dashboard").should("be.visible");
    });
  });

  it("Login avec guest valide", () => {
    cy.get("@guestUser").then((user) => {
      cy.login(user.username, user.password);
      cy.url().should("include", "/dashboard");
    });
  });

  it("Login avec mauvais mot de passe", () => {
    cy.get("@adminUser").then((user) => {
      cy.login(user.username, "wrongPassword");
      cy.get(".error-message").should("contain", "Invalid credentials");
    });
  });
});

// -------------------------
// Tests ScÃ©narios Register
// -------------------------
describe("ScÃ©narios Register", () => {
  beforeEach(() => {
    cy.visit("/register");
  });

  it("Register utilisateur valide", () => {
    const newUser = {
      username: "newUser",
      password: "password123",
      email: "newuser@test.com",
    };
    cy.get("input[name=username]").type(newUser.username);
    cy.get("input[name=email]").type(newUser.email);
    cy.get("input[name=password]").type(newUser.password);
    cy.get("button[type=submit]").click();
    cy.get(".success-message").should("contain", "Registration successful");
  });

  it("Register avec email dÃ©jÃ  existant", () => {
    cy.get("input[name=username]").type("admin");
    cy.get("input[name=email]").type("admin@test.com");
    cy.get("input[name=password]").type("1234");
    cy.get("button[type=submit]").click();
    cy.get(".error-message").should("contain", "Email already exists");
  });
});

// -------------------------
// Tests fonctionnalitÃ©s critiques (paiement, transfert, etc.)
// -------------------------
describe("FonctionnalitÃ©s critiques", () => {
  beforeEach(() => {
    // Se connecter automatiquement avant chaque test critique
    cy.get("@adminUser").then((user) => {
      cy.login(user.username, user.password);
    });
  });

  it("Paiement utilisateur", () => {
    cy.visit("/payment");
    cy.get("input[name=amount]").type("100");
    cy.get("button[type=submit]").click();
    cy.get(".success-message").should("contain", "Payment successful");
  });

  it("Transfert d'argent", () => {
    cy.visit("/transfer");
    cy.get("input[name=recipient]").type("guest");
    cy.get("input[name=amount]").type("50");
    cy.get("button[type=submit]").click();
    cy.get(".success-message").should("contain", "Transfer completed");
  });
});

// -------------------------
// Hooks au niveau global
// -------------------------
before(() => {
  // ğŸ”¹ S'exÃ©cute UNE SEULE FOIS avant TOUS les tests du fichier.
  cy.clearCookies();
  cy.clearLocalStorage();

  // Charger les fixtures (jeux de donnÃ©es)
  cy.fixture("users.json").then((users) => {
    cy.wrap(users.admin).as("adminUser");
    cy.wrap(users.guest).as("guestUser");
    cy.wrap(users.apiUser).as("apiUser");
  });
});

beforeEach(() => {
  // ğŸ”¹ Ã‰tat propre avant chaque test
  cy.visit("/");
});

afterEach(() => {
  // ğŸ”¹ Capture screenshot aprÃ¨s chaque test
  cy.screenshot();
});

after(() => {
  // ğŸ”¹ Nettoyage final
  cy.clearCookies();
  cy.clearLocalStorage();
  cy.log("Tous les tests terminÃ©s âœ…");
});

// -------------------------
// Tests ScÃ©narios Login
// -------------------------
describe("ScÃ©narios Login", () => {
  beforeEach(() => {
    // Intercepter la requÃªte de login
    cy.intercept("POST", "/api/login").as("loginRequest");
    cy.visit("/login");
  });

  it("Login avec admin valide", () => {
    cy.get("@adminUser").then((user) => {
      cy.login(user.username, user.password);

      // Attendre que la requÃªte de login soit terminÃ©e
      cy.wait("@loginRequest").its("response.statusCode").should("eq", 200);

      // VÃ©rifier la redirection + dashboard
      cy.url().should("include", "/dashboard");
      cy.get(".dashboard", { timeout: 5000 }).should("be.visible");
    });
  });

  it("Login avec guest valide", () => {
    cy.get("@guestUser").then((user) => {
      cy.login(user.username, user.password);
      cy.wait("@loginRequest").its("response.statusCode").should("eq", 200);
      cy.url().should("include", "/dashboard");
    });
  });

  it("Login avec mauvais mot de passe", () => {
    cy.get("@adminUser").then((user) => {
      cy.login(user.username, "wrongPassword");

      // Attendre la rÃ©ponse serveur
      cy.wait("@loginRequest").its("response.statusCode").should("eq", 401);

      cy.get(".error-message", { timeout: 3000 })
        .should("be.visible")
        .and("contain", "Invalid credentials");
    });
  });
});

// -------------------------
// Tests ScÃ©narios Register
// -------------------------
describe("ScÃ©narios Register", () => {
  beforeEach(() => {
    cy.intercept("POST", "/api/register").as("registerRequest");
    cy.visit("/register");
  });

  it("Register utilisateur valide", () => {
    const newUser = {
      username: "newUser",
      password: "password123",
      email: "newuser@test.com",
    };

    cy.get("input[name=username]").type(newUser.username);
    cy.get("input[name=email]").type(newUser.email);
    cy.get("input[name=password]").type(newUser.password);
    cy.get("button[type=submit]").click();

    cy.wait("@registerRequest").its("response.statusCode").should("eq", 201);

    cy.get(".success-message", { timeout: 5000 })
      .should("be.visible")
      .and("contain", "Registration successful");
  });

  it("Register avec email dÃ©jÃ  existant", () => {
    cy.get("input[name=username]").type("admin");
    cy.get("input[name=email]").type("admin@test.com");
    cy.get("input[name=password]").type("1234");
    cy.get("button[type=submit]").click();

    cy.wait("@registerRequest").its("response.statusCode").should("eq", 409);

    cy.get(".error-message", { timeout: 5000 })
      .should("be.visible")
      .and("contain", "Email already exists");
  });
});

// -------------------------
// Tests fonctionnalitÃ©s critiques (paiement, transfert, etc.)
// -------------------------
describe("FonctionnalitÃ©s critiques", () => {
  beforeEach(() => {
    cy.intercept("POST", "/api/login").as("loginRequest");
    cy.intercept("POST", "/api/payment").as("paymentRequest");
    cy.intercept("POST", "/api/transfer").as("transferRequest");

    // Se connecter avant chaque test critique
    cy.get("@adminUser").then((user) => {
      cy.login(user.username, user.password);
      cy.wait("@loginRequest").its("response.statusCode").should("eq", 200);
    });
  });

  it("Paiement utilisateur", () => {
    cy.visit("/payment");
    cy.get("input[name=amount]").type("100");
    cy.get("button[type=submit]").click();

    cy.wait("@paymentRequest").its("response.statusCode").should("eq", 200);

    cy.get(".success-message", { timeout: 5000 })
      .should("be.visible")
      .and("contain", "Payment successful");
  });

  it("Transfert d'argent", () => {
    cy.visit("/transfer");
    cy.get("input[name=recipient]").type("guest");
    cy.get("input[name=amount]").type("50");
    cy.get("button[type=submit]").click();

    cy.wait("@transferRequest").its("response.statusCode").should("eq", 200);

    cy.get(".success-message", { timeout: 5000 })
      .should("be.visible")
      .and("contain", "Transfer completed");
  });
});

// -------------------------
// Hooks au niveau global
// -------------------------
before(() => {
  cy.clearCookies();
  cy.clearLocalStorage();

  cy.fixture("users.json").then((users) => {
    cy.wrap(users.admin).as("adminUser");
    cy.wrap(users.guest).as("guestUser");
    cy.wrap(users.apiUser).as("apiUser");
  });
});

beforeEach(() => {
  cy.visit("/");
});

afterEach(() => {
  cy.screenshot();
});

after(() => {
  cy.clearCookies();
  cy.clearLocalStorage();
  cy.log("Tous les tests terminÃ©s âœ…");
});

// -------------------------
// Tests ScÃ©narios Login
// -------------------------
describe("ScÃ©narios Login", () => {
  beforeEach(() => {
    cy.intercept("POST", "/api/login").as("loginRequest");
    cy.visit("/login");
  });

  it("Login avec admin valide", () => {
    cy.get("@adminUser").then((user) => {
      cy.login(user.username, user.password);
      cy.wait("@loginRequest").its("response.statusCode").should("eq", 200);

      cy.url().should("include", "/dashboard");
      cy.getBySel("dashboard", { timeout: 5000 }).should("be.visible");
    });
  });

  it("Login avec guest valide", () => {
    cy.get("@guestUser").then((user) => {
      cy.login(user.username, user.password);
      cy.wait("@loginRequest").its("response.statusCode").should("eq", 200);

      cy.url().should("include", "/dashboard");
    });
  });

  it("Login avec mauvais mot de passe", () => {
    cy.get("@adminUser").then((user) => {
      cy.login(user.username, "wrongPassword");
      cy.wait("@loginRequest").its("response.statusCode").should("eq", 401);

      cy.getBySel("error-message", { timeout: 3000 })
        .should("be.visible")
        .and("contain", "Invalid credentials");
    });
  });
});

// -------------------------
// Tests ScÃ©narios Register
// -------------------------
describe("ScÃ©narios Register", () => {
  beforeEach(() => {
    cy.intercept("POST", "/api/register").as("registerRequest");
    cy.visit("/register");
  });

  it("Register utilisateur valide", () => {
    const newUser = {
      username: "newUser",
      password: "password123",
      email: "newuser@test.com",
    };

    cy.getBySel("username-input").type(newUser.username);
    cy.getBySel("email-input").type(newUser.email);
    cy.getBySel("password-input").type(newUser.password);
    cy.getBySel("submit-register").click();

    cy.wait("@registerRequest").its("response.statusCode").should("eq", 201);

    cy.getBySel("success-message", { timeout: 5000 })
      .should("be.visible")
      .and("contain", "Registration successful");
  });

  it("Register avec email dÃ©jÃ  existant", () => {
    cy.getBySel("username-input").type("admin");
    cy.getBySel("email-input").type("admin@test.com");
    cy.getBySel("password-input").type("1234");
    cy.getBySel("submit-register").click();

    cy.wait("@registerRequest").its("response.statusCode").should("eq", 409);

    cy.getBySel("error-message", { timeout: 5000 })
      .should("be.visible")
      .and("contain", "Email already exists");
  });
});

// -------------------------
// Tests fonctionnalitÃ©s critiques
// -------------------------
describe("FonctionnalitÃ©s critiques", () => {
  beforeEach(() => {
    cy.intercept("POST", "/api/login").as("loginRequest");
    cy.intercept("POST", "/api/payment").as("paymentRequest");
    cy.intercept("POST", "/api/transfer").as("transferRequest");

    cy.get("@adminUser").then((user) => {
      cy.login(user.username, user.password);
      cy.wait("@loginRequest").its("response.statusCode").should("eq", 200);
    });
  });

  it("Paiement utilisateur", () => {
    cy.visit("/payment");
    cy.getBySel("payment-amount").type("100");
    cy.getBySel("payment-submit").click();

    cy.wait("@paymentRequest").its("response.statusCode").should("eq", 200);

    cy.getBySel("success-message", { timeout: 5000 })
      .should("be.visible")
      .and("contain", "Payment successful");
  });

  it("Transfert d'argent", () => {
    cy.visit("/transfer");
    cy.getBySel("transfer-recipient").type("guest");
    cy.getBySel("transfer-amount").type("50");
    cy.getBySel("transfer-submit").click();

    cy.wait("@transferRequest").its("response.statusCode").should("eq", 200);

    cy.getBySel("success-message", { timeout: 5000 })
      .should("be.visible")
      .and("contain", "Transfer completed");
  });
});
