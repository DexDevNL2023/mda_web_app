{
  "stats": {
    "suites": 2,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-28T09:31:53.244Z",
    "end": "2025-08-28T09:32:05.790Z",
    "duration": 12546,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0483c58a-8ef8-4682-a4bd-a1f42391154e",
      "title": "",
      "fullFile": "cypress\\e2e\\todo.cy.js",
      "file": "cypress\\e2e\\todo.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Bonjour",
          "fullTitle": "Bonjour",
          "timedOut": null,
          "duration": 22,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "",
          "err": {},
          "uuid": "8f2b6ceb-9b8d-41e0-b940-1bbb0ad21390",
          "parentUUID": "0483c58a-8ef8-4682-a4bd-a1f42391154e",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "36d1c22b-80b5-4ff9-ad63-0eb391b749a0",
          "title": "exemple d’application todo",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "affiche deux tâches par défaut",
              "fullTitle": "exemple d’application todo affiche deux tâches par défaut",
              "timedOut": null,
              "duration": 1599,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// On utilise `cy.get()` pour récupérer tous les éléments qui correspondent au sélecteur.\n// Puis, avec `should`, on vérifie qu’il y a bien deux éléments correspondants,\n// ce qui correspond aux deux tâches présentes par défaut.\ncy.get('.todo-list li').should('have.length', 2);\n// On peut aller plus loin et vérifier que les tâches par défaut\n// contiennent bien le texte attendu. On utilise `first` et `last`\n// pour cibler uniquement le premier et le dernier élément,\n// puis on vérifie avec `should` que leur texte est correct.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "7f2399fa-a4ac-4654-a6f5-2f4b8ff26260",
              "parentUUID": "36d1c22b-80b5-4ff9-ad63-0eb391b749a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "peut ajouter une nouvelle tâche",
              "fullTitle": "exemple d’application todo peut ajouter une nouvelle tâche",
              "timedOut": null,
              "duration": 522,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// On stocke le texte de la nouvelle tâche dans une variable\n// afin de pouvoir le réutiliser facilement.\nconst newItem = 'Feed the cat';\n// On sélectionne l’élément input grâce à son attribut `data-test`\n// et on utilise la commande `type` pour taper le texte de la tâche.\n// Après avoir tapé le texte, on simule aussi la touche \"Entrée\" pour soumettre.\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`);\n// On vérifie ensuite que la tâche a bien été ajoutée à la liste.\n// Comme c’est la plus récente, elle doit apparaître en dernier.\n// Avec les deux tâches par défaut, il doit donc y avoir 3 éléments au total.\n// Comme les assertions renvoient l’élément testé,\n// on peut enchaîner plusieurs vérifications dans une seule instruction.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "241c9eb0-2d03-43d0-a668-bf576ba77b15",
              "parentUUID": "36d1c22b-80b5-4ff9-ad63-0eb391b749a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "peut cocher une tâche comme terminée",
              "fullTitle": "exemple d’application todo peut cocher une tâche comme terminée",
              "timedOut": null,
              "duration": 296,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// En plus de `get`, on peut utiliser `contains` pour récupérer un élément par son texte.\n// Cela renvoie ici le <label> qui contient le texte.\n// Pour cocher la case correspondante, on remonte au parent (<li>)\n// puis on cherche l’élément enfant <input type=checkbox> et on le coche avec `check()`.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check();\n// Une fois la case cochée, on vérifie que l’élément <li> correspondant\n// possède bien la classe CSS `completed`.\n// On repart du texte avec `contains`, on remonte avec `parents('li')`\n// et on fait l’assertion sur la classe.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "3f41633b-4617-42ad-a522-169d4bfcd568",
              "parentUUID": "36d1c22b-80b5-4ff9-ad63-0eb391b749a0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "5b6430a6-093f-43d9-85a2-84cea454bb04",
              "title": "avec une tâche déjà cochée",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "peut filtrer les tâches non terminées",
                  "fullTitle": "exemple d’application todo avec une tâche déjà cochée peut filtrer les tâches non terminées",
                  "timedOut": null,
                  "duration": 451,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// On clique sur le bouton \"Active\"\n// pour n’afficher que les tâches non terminées.\ncy.contains('Active').click();\n// Après le filtrage, il ne doit rester qu’une seule tâche : \"Walk the dog\".\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog');\n// Et on s’assure aussi que la tâche cochée (\"Pay electric bill\")\n// n’apparaît plus dans la liste.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "58a6cbe6-50eb-4735-af60-d780eaa69f6f",
                  "parentUUID": "5b6430a6-093f-43d9-85a2-84cea454bb04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "peut filtrer les tâches terminées",
                  "fullTitle": "exemple d’application todo avec une tâche déjà cochée peut filtrer les tâches terminées",
                  "timedOut": null,
                  "duration": 360,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Même principe, mais avec le filtre \"Completed\"\n// pour n’afficher que les tâches terminées.\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\n// Vérification inverse : \"Walk the dog\" ne doit pas apparaître.\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "cc891278-72cb-46d4-8163-57b8f92cf4ed",
                  "parentUUID": "5b6430a6-093f-43d9-85a2-84cea454bb04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "peut supprimer toutes les tâches terminées",
                  "fullTitle": "exemple d’application todo avec une tâche déjà cochée peut supprimer toutes les tâches terminées",
                  "timedOut": null,
                  "duration": 435,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// On clique sur le bouton \"Clear completed\".\n// La commande `contains` sert à deux choses ici :\n// - vérifier que le bouton existe (il n’apparaît que si une tâche est cochée),\n// - sélectionner ce bouton pour pouvoir cliquer dessus.\ncy.contains('Clear completed').click();\n// On vérifie ensuite qu’il ne reste plus qu’une tâche dans la liste,\n// et que \"Pay electric bill\" a bien disparu.\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill');\n// Enfin, on vérifie que le bouton \"Clear completed\"\n// n’existe plus dans la page.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "96a8eb56-cacc-4c9e-a667-240d9509bc2b",
                  "parentUUID": "5b6430a6-093f-43d9-85a2-84cea454bb04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "récupère un champ, saisit une valeur et vérifie",
                  "fullTitle": "exemple d’application todo avec une tâche déjà cochée récupère un champ, saisit une valeur et vérifie",
                  "timedOut": null,
                  "duration": 2110,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// On visite directement la page d’accueil de l’exemple Cypress.\ncy.visit('https://example.cypress.io');\n// On recherche dans la page un élément contenant le texte \"type\"\n// et on clique dessus. Cela redirige vers une autre page de démonstration.\ncy.contains('type').click();\n// On vérifie que l’URL actuelle contient bien \"/commands/actions\".\n// Cela prouve que le clic nous a bien redirigé vers la bonne page.\ncy.url().should('include', '/commands/actions');\n// On récupère l’input qui a la classe CSS \".action-email\"\n// et on saisit l’adresse email factice dans ce champ.\ncy.get('.action-email').type('fake@email.com');\n// Enfin, on vérifie que la valeur contenue dans l’input\n// est bien exactement l’email que l’on vient de taper.\ncy.get('.action-email').should('have.value', 'fake@email.com');",
                  "err": {},
                  "uuid": "0ccfe704-a542-4fed-be40-8cd6776099f4",
                  "parentUUID": "5b6430a6-093f-43d9-85a2-84cea454bb04",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "58a6cbe6-50eb-4735-af60-d780eaa69f6f",
                "cc891278-72cb-46d4-8163-57b8f92cf4ed",
                "96a8eb56-cacc-4c9e-a667-240d9509bc2b",
                "0ccfe704-a542-4fed-be40-8cd6776099f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3356,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "7f2399fa-a4ac-4654-a6f5-2f4b8ff26260",
            "241c9eb0-2d03-43d0-a668-bf576ba77b15",
            "3f41633b-4617-42ad-a522-169d4bfcd568"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2417,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [
        "8f2b6ceb-9b8d-41e0-b940-1bbb0ad21390"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 22,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "current-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": true,
        "html": true,
        "json": true,
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "reportFilename": "current-report",
        "timestamp": false
      },
      "version": "6.2.0"
    }
  }
}